name: For each commit and PR
on:
  push:
  pull_request:

jobs:
  get-runner:
    runs-on: [ubuntu-latest]
    outputs:
      runner: ${{ steps.get-runner.outputs.runner }}
    steps:
      - name: Get Runner
        id: get-runner
        run: |
          if [[ ${{ github.event.repository.owner.name }} == "tinkerbell" ]]; then
            echo "using self-hosted"
            echo ::set-output name=runner::self-hosted,X64
          else
            echo "using github-hosted"
            echo ::set-output name=runner::ubuntu-latest
          fi
  validation:
    needs: [get-runner]
    runs-on: ${{ needs.get-runner.outputs.runner }}
    env:
      CGO_ENABLED: 0
    steps:
      - name: dump config
        uses: hmarr/debug-action@v2
      - name: Setup Dynamic Env
        run: |
          echo "MAKEFLAGS=-j$(nproc)" | tee $GITHUB_ENV
          set +x
          if [[ ${OCI_REGISTRY:-} != "" ]]; then
            echo "PUSH_IMAGES=true" | tee $GITHUB_ENV
          else
            echo "PUSH_IMAGES=false" | tee $GITHUB_ENV
          fi
        env:
          OCI_REGISTRY: ${{ secrets.OCI_REGISTRY }}
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Install nix
        uses: cachix/install-nix-action@018abf956a0a15673dae4932ae26f0f071ac0944
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Non Go formatters and linters
        run: ./.github/workflows/ci-non-go.sh
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.16.3"
      - name: Generate all files
        run: nix-shell --run 'make gen && make ipxe'
      - name: goimports
        run: go get golang.org/x/tools/cmd/goimports && goimports -d . | (! grep .)
      - name: go vet
        run: go mod tidy && go vet ./...
      - name: golangci-lint brought to you by Nix
        run: nix-shell --run 'GOROOT= golangci-lint run -v'
      - name: go test
        run: go test -v ./... -gcflags=-l
      - name: Run iPXE tests
        run: echo nix-shell --run 'make test-ipxe'
      - name: go test coverage
        run: go test -coverprofile=coverage.txt ./... -gcflags=-l
      - name: upload codecov
        run: bash <(curl -s https://codecov.io/bash)
      - name: compile binaries
        run: nix-shell --run 'make crosscompile'
      - name: Docker Image Tag for SHA
        if: env.PUSH_IMAGES == 'true'
        run: |
          DOCKER_IMAGE_TAGS="$REGISTRY/$NS/boots:sha-${GITHUB_SHA::8}"
          echo "DOCKER_IMAGE_TAGS=$DOCKER_IMAGE_TAGS" | tee $GITHUB_ENV
        env:
          NS: ${{ secrets.OCI_REGISTRY_NS }}
          REGISTRY: ${{ secrets.OCI_REGISTRY }}
      - name: Docker Image Tag for Latest
        if: env.PUSH_IMAGES == 'true' && startsWith(github.ref, 'refs/heads/main')
        run: |
          DOCKER_IMAGE_TAGS="$DOCKER_IMAGE_TAGS,${DOCKER_IMAGE_TAGS%%:sha*}:latest"
          echo "DOCKER_IMAGE_TAGS=$DOCKER_IMAGE_TAGS" | tee $GITHUB_ENV
      - name: Login to Registry
        uses: docker/login-action@v1
        if: env.PUSH_IMAGES == 'true'
        with:
          registry: ${{ secrets.OCI_REGISTRY}}
          username: ${{ secrets.OCI_REGISTRY_USERNAME }}
          password: ${{ secrets.OCI_REGISTRY_PASSWORD }}
      - name: Push to Registry
        uses: docker/build-push-action@v2
        if: env.PUSH_IMAGES == 'true'
        with:
          context: ./
          file: ./Dockerfile
          cache-from: type=registry,ref=${{ secrets.OCI_REGISTRY }}/${{ secrets.OCI_REGISTRY_NS }}/boots:latest
          tags: ${{ env.DOCKER_IMAGE_TAGS }}
          platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
