name: Build and Test and Push
description: Build and test all the things, push images at the end (maybe).
inputs:
  registry:
    description: OCI registry to push to
    default: quay.io
  namespace:
    description: Organization/user to use as the namespace for container image
    default: tinkerbell
  username:
    description: Username used to log against the registry
  password:
    description: Password or personal access token used to log against the registry
runs:
  using: composite
  steps:
    - name: Setup Dynamic Env
      shell: bash
      run: |
        PUSH=false
        set +x # ensure we don't leak creds (even though github would hide it)
        if [[ -n ${OCI_USERNAME:-} ]] && [[ -n ${OCI_PASSWORD:-} ]]; then
          PUSH=true
        fi

        {
          echo "MAKEFLAGS=-j$(nproc)"
          echo "OCI_REGISTRY=${OCI_REGISTRY:-quay.io}"
          echo "OCI_REGISTRY_NS=${OCI_REGISTRY_NS:-tinkerbell}"
          echo "PUSH=$PUSH"
        } | tee -a $GITHUB_ENV
      env:
        OCI_USERNAME: ${{ inputs.username }}
        OCI_PASSWORD: ${{ inputs.password }}
        OCI_REGISTRY: ${{ inputs.registry }}
        OCI_REGISTRY_NS: ${{ inputs.namespace }}

    - name: Install nix
      uses: cachix/install-nix-action@018abf956a0a15673dae4932ae26f0f071ac0944
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Fetch Nix Derivations
      shell: bash
      run: nix-shell --command true

    - name: Fetch Go Packages
      shell: bash
      run: nix-shell --run 'go get ./... && go get -t ./... && make tools'

    - name: Generate all files
      shell: bash
      run: nix-shell --run 'make gen'

    - name: goimports
      shell: bash
      run: ./bin/goimports -d . | (! grep .)

    - name: go vet
      shell: bash
      run: nix-shell --run 'go mod tidy && go vet ./...'

    # This will catch any modifcations from go mod tidy above, this is hacky and needs to go away when boots gets lint-install'ed
    - name: Non Go formatters and linters
      shell: bash
      run: ./.github/actions/build-test-push/ci-non-go.sh

    - name: golangci-lint brought to you by Nix
      shell: bash
      run: nix-shell --run 'golangci-lint run -v'

    - name: go test
      shell: bash
      run: nix-shell --run 'go test -v ./... -gcflags=-l'

    - name: go test coverage
      shell: bash
      run: nix-shell --run 'go test -coverprofile=coverage.txt ./... -gcflags=-l'

    - name: upload codecov
      shell: bash
      run: bash <(curl -s https://codecov.io/bash)

    - name: compile binaries
      shell: bash
      run: nix-shell --run 'make crosscompile'

    - name: Docker Image Tags
      id: gen-tags
      shell: bash
      run: |
        TAGS="${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_NS }}/boots:sha-$(git log -1 --pretty=%h)"
        if ${{ startsWith(github.ref, 'refs/heads/main') }}; then
          TAGS="$TAGS,${TAGS%%:sha*}:latest"
        fi
        echo ::set-output "name=tags::$TAGS"

    - name: Login to Registry
      uses: docker/login-action@v1
      if: env.PUSH == 'true'
      with:
        registry: ${{ env.OCI_REGISTRY}}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Push to Registry
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: ./Dockerfile
        cache-from: type=registry,ref=${{ env.OCI_REGISTRY }}/${{ env.OCI_REGISTRY_NS }}/boots:latest
        push: ${{ env.PUSH == 'true' }}
        tags: ${{ steps.gen-tags.outputs.tags }}
        platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
